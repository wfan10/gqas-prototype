# configure redis store to production by setting properties. 
spring.session.store-type=redis
## set inactive session to 1 hour. 
server.session.timeout=3600
## spring.cloud.enabled=true ... desploy redis to cloud foundry set this to true. 
## set redis session to localhost 
spring.cloud.enabled=false
## set cache type to redis if autodetection does not work.
spring.cache.type=redis 
## spring.cache.type=none ... disable cache
## below necessary for deployment and not localhost 
spring.redis.host=localhost
spring.redis.port=6379

## set port numbers
server.port=9000
management.port=9001
management.address=127.0.0.1

## database parameters
oracle.url=jdbc:oracle:thin:@19.110.69.151:1521:AWSCQA 
oracle.username=app_server
oracle.password=unx3-qac
oracle.driver-class-name=oracle.jdbc.driver.OracleDriver

## logging properties
# Logging pattern for the console
#logging.pattern.console= "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
# Logging pattern for file
#logging.pattern.file= "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
logging.level.org.springframework.web=INFO
logging.level.com.ford.gqas=DEBUG
# logging SQL statements and parameters.
# see reference: http://stackoverflow.com/questions/1792244/spring-jdbc-is-not-logging-sql-with-log4j
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
## logging.level.org.springframework.jdbc.core=TRACE
# logging.file=logs/spring-boot-logging.log
logging.file=${HOME}/logs/spring-boot-logging.log
